{"version":3,"sources":["components/todo/form.js","components/todo/list.js","components/todo/todo.js","app.js","index.js"],"names":["TodoForm","props","useState","item","itemState","handleInputChange","e","target","name","value","onSubmit","preventDefault","reset","handleSubmit","type","placeholder","onChange","defaultValue","min","max","TodoList","list","map","className","complete","toString","key","_id","onClick","handleComplete","text","ToDo","listState","done","doneState","useEffect","difficulty","assignee","filter","length","uuidv4","id","i","checkedList","listItem","App","Main","React","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"4PAwDeA,MArDf,SAAmBC,GAAQ,IAAD,EAEAC,mBAAS,IAFT,mBAEnBC,EAFmB,KAEbC,EAFa,KAGlBC,EAAoB,SAAAC,GASxBF,EAAU,2BAAID,GAAL,kBAAYG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAehD,OACE,oCACE,wCACA,0BAAMC,SAVW,SAACJ,GACpBA,EAAEK,iBACFL,EAAEC,OAAOK,QACTX,EAAMY,aAAaV,GACnBC,EAAU,CAAEU,KAAM,YAOd,+BACE,4CACA,2BACEN,KAAK,OACLO,YAAY,sBACZC,SAAUX,KAGd,+BACE,mDACA,2BAAOY,aAAa,IAAIH,KAAK,QAAQI,IAAI,IAAIC,IAAI,IAAIX,KAAK,aAAaQ,SAAUX,KAEnF,+BACE,6CACA,2BAAOS,KAAK,OAAON,KAAK,WAAWO,YAAY,cAAcC,SAAUX,KAEzE,+CC9BOe,MAlBf,SAAmBnB,GAEjB,OACE,4BACGA,EAAMoB,KAAKC,KAAI,SAAAnB,GAAI,OAClB,wBACEoB,UAAS,mBAAcpB,EAAKqB,SAASC,YACrCC,IAAKvB,EAAKwB,KAEV,0BAAMC,QAAS,kBAAM3B,EAAM4B,eAAe1B,EAAKwB,OAC5CxB,EAAK2B,Y,cCmEHC,MAzEf,SAAc9B,GAAO,MAOOC,mBAAS,IAPhB,mBAOZmB,EAPY,KAONW,EAPM,OAQO9B,mBAAS,GARhB,mBAQZ+B,EARY,KAQNC,EARM,KAgDnB,OAjBAC,qBAAU,WASRH,EARW,CACT,CAAEL,IAAK,EAAGH,UAAU,EAAOM,KAAM,oBAAqBM,WAAY,EAAGC,SAAU,YAC/E,CAAEV,IAAK,EAAGH,UAAU,EAAOM,KAAM,iBAAkBM,WAAY,EAAGC,SAAU,YAC5E,CAAEV,IAAK,EAAGH,UAAU,EAAOM,KAAM,eAAgBM,WAAY,EAAGC,SAAU,YAC1E,CAAEV,IAAK,EAAGH,UAAU,EAAMM,KAAM,cAAeM,WAAY,EAAGC,SAAU,YACxE,CAAEV,IAAK,EAAGH,UAAU,EAAOM,KAAM,aAAcM,WAAY,EAAGC,SAAU,gBAI1E,IAEFF,qBAAU,WAERD,EAAUb,EAAKiB,QAAO,SAAAnC,GAAI,OAAKA,EAAKqB,YAAUe,UAC9C,CAAClB,IAGD,oCACE,gCACE,yCACeY,EADf,uBAKF,6BAASV,UAAU,QAEjB,6BACE,kBAAC,EAAD,CAAUV,aAjDF,SAACV,GACfA,EAAKwB,IAAMa,cACXrC,EAAKqB,UAAW,EAChBQ,EAAU,GAAD,mBAAMX,GAAN,CAAYlB,SAiDjB,6BACE,kBAAC,EAAD,CACEkB,KAAMA,EACNQ,eA/Ca,SAAAY,GAErB,IAAItC,EAAOkB,EAAKiB,QAAO,SAAAI,GAAC,OAAIA,EAAEf,MAAQc,KAAI,IAAM,GAEhD,GAAItC,EAAKwB,IAAK,CACZxB,EAAKqB,UAAYrB,EAAKqB,SACtB,IAAImB,EAActB,EAAKC,KAAI,SAAAsB,GAAQ,OAAIA,EAASjB,MAAQxB,EAAKwB,IAAMxB,EAAOyC,KAC1EZ,EAAWW,WCpBFE,EAPH,WACV,OACE,oCACE,kBAAC,EAAD,QCFAC,E,uKAEF,OAAO,kBAAC,EAAD,U,GAFQC,IAAMC,WAMnBC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAAUJ,K","file":"static/js/main.1e819992.chunk.js","sourcesContent":["import React, {useState } from 'react';\n\n\nfunction TodoForm (props) {\n\n  let [item ,itemState] = useState({});\n  const handleInputChange = e => {\n    // const [allItem ,allItemState] = useState({});\n    // console.log('e.target.value',e.target.value);\n    // console.log('item',item);\n    // console.log('e.target.name',e.target.name);\n    // itemState([...allItem,item]);\n    //////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    //to do input \n    //its used to change the state and adding  new key(assignee) with value of (Assigned To Input) OR key difficulty with value of the scale range input\n    itemState({...item, [e.target.name]: e.target.value } );\n    /*\n    * rally good implementing\n    (copying the item object and if the kye is not there it will\n    add it with the value but if key is there just change it with the new one)    \n    */\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.target.reset();\n    props.handleSubmit(item);\n    itemState({ type: 'reset' });\n  };\n\n  return (\n    <>\n      <h3>Add Item</h3>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <span>To Do Item</span>\n          <input\n            name=\"text\"\n            placeholder=\"Add To Do List Item\"\n            onChange={handleInputChange}\n          />\n        </label>\n        <label>\n          <span>Difficulty Rating</span>\n          <input defaultValue=\"1\" type=\"range\" min=\"1\" max=\"5\" name=\"difficulty\" onChange={handleInputChange} />\n        </label>\n        <label>\n          <span>Assigned To</span>\n          <input type=\"text\" name=\"assignee\" placeholder=\"Assigned To\" onChange={handleInputChange} />\n        </label>\n        <button>Add Item</button>\n      </form>\n    </>\n  );\n}\n\nexport default TodoForm;\n","import React from 'react';\n\nfunction TodoList (props) {\n\n  return (\n    <ul>\n      {props.list.map(item => (\n        <li\n          className={`complete-${item.complete.toString()}`}\n          key={item._id}\n        >\n          <span onClick={() => props.handleComplete(item._id)}>\n            {item.text}\n          </span>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default TodoList;\n","import React, { useState, useEffect } from 'react';\nimport TodoForm from './form.js';\nimport TodoList from './list.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport './todo.scss';\n\nfunction ToDo(props) {\n\n  /*\n  this method fired when you submit the form (form file)\n  addItem method is used to add the id and complete properties to the item \n  and changing (the list) that inside main state \n */\n  const [list, listState] = useState([]);\n  const [done, doneState] = useState(0);\n\n  const addItem = (item) => {\n    item._id = uuidv4();\n    item.complete = false;\n    listState( [...list, item] );\n    // console.log('this.state.list in todo file',this.state.list);\n\n  };\n  //to change the complete value and in the browser it just render the item that changed not the whole items (the same setState)\n  const toggleComplete = id => {\n\n    let item = list.filter(i => i._id === id)[0] || {};\n\n    if (item._id) {\n      item.complete = !item.complete;\n      let checkedList = list.map(listItem => listItem._id === item._id ? item : listItem);\n      listState( checkedList );\n    }\n\n  };\n\n  // its like componentDidMount() so just one implementation \n  useEffect(()=>{\n    let list = [\n      { _id: 1, complete: false, text: 'Clean the Kitchen', difficulty: 3, assignee: 'Person A' },\n      { _id: 2, complete: false, text: 'Do the Laundry', difficulty: 2, assignee: 'Person A' },\n      { _id: 3, complete: false, text: 'Walk the Dog', difficulty: 4, assignee: 'Person B' },\n      { _id: 4, complete: true, text: 'Do Homework', difficulty: 3, assignee: 'Person C' },\n      { _id: 5, complete: false, text: 'Take a Nap', difficulty: 1, assignee: 'Person B' },\n    ];\n\n    listState( list );\n  },[]);\n  ///after every change will fire\n  useEffect(()=>{\n    // console.log(list.filter(item => !item.complete).length);\n    doneState(list.filter(item => !item.complete).length);\n  },[list]);\n\n  return (\n    <>\n      <header>\n        <h2>\n            There are {done} Items To Complete\n        </h2>\n      </header>\n\n      <section className=\"todo\">\n\n        <div>\n          <TodoForm handleSubmit={addItem} />\n        </div>\n\n        <div>\n          <TodoList\n            list={list}\n            handleComplete={toggleComplete}\n          />\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default ToDo;\n","import React from 'react';\n\nimport ToDo from './components/todo/todo.js';\n\nconst App = ()=> {\n  return (\n    <>\n      <ToDo />\n    </>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app.js';\n\nclass Main extends React.Component {\n  render() {\n    return <App />;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}